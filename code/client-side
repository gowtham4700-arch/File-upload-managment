package.json

{
  "name": "file-upload-frontend",
  "version": "1.0.0",
  "private": true,
  "dependencies": {
    "axios": "^1.4.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-scripts": "5.0.1"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test --env=jsdom",
    "eject": "react-scripts eject"
  }
}


frontend/public/index.html

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>File Upload Manager</title>
  </head>
  <body>
    <div id="root"></div>
  </body>
</html>


frontend/src/index.js

import React from 'react';
import { createRoot } from 'react-dom/client';
import App from './App';
import './App.css';

const root = createRoot(document.getElementById('root'));
root.render(<App />);


frontend/src/api.js

import axios from 'axios';
const API = axios.create({
  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:4000/api'
});
export default API;


frontend/src/App.js

import React, { useState, useEffect } from 'react';
import API from './api';

function App() {
  const [file, setFile] = useState(null);
  const [files, setFiles] = useState([]);
  const [loading, setLoading] = useState(false);

  useEffect(() => { fetchFiles(); }, []);

  async function fetchFiles() {
    try {
      setLoading(true);
      const res = await API.get('/files');
      setFiles(res.data);
    } catch {
      alert('Failed to load files');
    } finally { setLoading(false); }
  }

  async function handleUpload(e) {
    e.preventDefault();
    if (!file) return alert('Select a file first');
    const form = new FormData();
    form.append('file', file);
    try {
      setLoading(true);
      await API.post('/upload', form, { headers: { 'Content-Type': 'multipart/form-data' }});
      setFile(null);
      fetchFiles();
    } catch {
      alert('Upload failed');
    } finally { setLoading(false); }
  }

  async function handleDelete(id) {
    if (!window.confirm('Delete this file?')) return;
    await API.delete(`/files/${id}`);
    fetchFiles();
  }

  return (
    <div className="container">
      <h1>File Upload Manager</h1>
      <form onSubmit={handleUpload} className="upload-form">
        <input type="file" onChange={e => setFile(e.target.files[0])} />
        <button type="submit" disabled={loading}>Upload</button>
      </form>
      <hr />
      <h2>Files</h2>
      {loading ? <p>Loading...</p> : (
        <ul className="file-list">
          {files.map(f => (
            <li key={f.id} className="file-item">
              <div>
                <strong>{f.originalName}</strong><br />
                <small>{(f.size/1024).toFixed(2)} KB â€” {new Date(f.uploadDate).toLocaleString()}</small>
              </div>
              <div>
                <a href={`http://localhost:4000/api/files/${f.id}/download`} target="_blank" rel="noreferrer">Download</a>
                <button onClick={() => handleDelete(f.id)}>Delete</button>
              </div>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}
export default App;


frontend/src/App.css

body { font-family: Arial, sans-serif; background: #f5f5f5; }
.container { max-width: 800px; margin: 40px auto; background: #fff; padding: 20px; border-radius: 8px; }
.upload-form { display: flex; gap: 10px; margin-bottom: 20px; }
.file-list { list-style: none; padding: 0; }
.file-item { display: flex; justify-content: space-between; align-items: center; border-bottom: 1px solid #eee; padding: 8px 0; }
button { background: #e74c3c; color: white; border: none; padding: 5px 10px; border-radius: 5px; cursor: pointer; }
button:hover { opacity: 0.8; }
a { margin-right: 10px; text-decoration: none; color: #3498db; }
