//package.json


{
  "name": "file-upload-backend",
  "version": "1.0.0",
  "description": "Simple file upload management backend",
  "main": "index.js",
  "scripts": {
    "start": "node index.js",
    "dev": "nodemon index.js"
  },
  "dependencies": {
    "cors": "^2.8.5",
    "express": "^4.18.2",
    "multer": "^1.4.5-lts.1",
    "uuid": "^9.0.0"
  },
  "devDependencies": {
    "nodemon": "^2.0.22"
  }
}

index.js

const express = require('express');
const multer = require('multer');
const fs = require('fs');
const path = require('path');
const cors = require('cors');
const { v4: uuidv4 } = require('uuid');

const app = express();
const PORT = process.env.PORT || 4000;

app.use(cors());
app.use(express.json());

const UPLOAD_DIR = path.join(__dirname, 'uploads');
const META_FILE = path.join(__dirname, 'files.json');

if (!fs.existsSync(UPLOAD_DIR)) fs.mkdirSync(UPLOAD_DIR);
if (!fs.existsSync(META_FILE)) fs.writeFileSync(META_FILE, '[]', 'utf8');

const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, UPLOAD_DIR);
  },
  filename: function (req, file, cb) {
    const unique = `${Date.now()}-${uuidv4()}${path.extname(file.originalname)}`;
    cb(null, unique);
  }
});
const upload = multer({ storage });

function readMeta() {
  try {
    return JSON.parse(fs.readFileSync(META_FILE, 'utf8') || '[]');
  } catch {
    return [];
  }
}
function writeMeta(meta) {
  fs.writeFileSync(META_FILE, JSON.stringify(meta, null, 2), 'utf8');
}

// Upload
app.post('/api/upload', upload.single('file'), (req, res) => {
  if (!req.file) return res.status(400).json({ error: 'No file uploaded' });

  const meta = readMeta();
  const newFile = {
    id: uuidv4(),
    originalName: req.file.originalname,
    filename: req.file.filename,
    size: req.file.size,
    mimetype: req.file.mimetype,
    uploadDate: new Date().toISOString()
  };
  meta.push(newFile);
  writeMeta(meta);

  res.json(newFile);
});

// List
app.get('/api/files', (req, res) => {
  res.json(readMeta());
});

// Download
app.get('/api/files/:id/download', (req, res) => {
  const meta = readMeta();
  const file = meta.find(f => f.id === req.params.id);
  if (!file) return res.status(404).json({ error: 'Not found' });
  const filePath = path.join(UPLOAD_DIR, file.filename);
  res.download(filePath, file.originalName);
});

// Delete
app.delete('/api/files/:id', (req, res) => {
  let meta = readMeta();
  const idx = meta.findIndex(f => f.id === req.params.id);
  if (idx === -1) return res.status(404).json({ error: 'Not found' });
  const [removed] = meta.splice(idx, 1);
  writeMeta(meta);
  fs.unlinkSync(path.join(UPLOAD_DIR, removed.filename));
  res.json({ success: true });
});

app.listen(PORT, () => console.log(`Backend running â†’ http://localhost:${PORT}`));

